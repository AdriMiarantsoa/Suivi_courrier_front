{"ast":null,"code":"import { Bar } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js';\nimport axios from 'axios';\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\nexport default {\n  components: {\n    BarChart: Bar\n  },\n  data() {\n    return {\n      statisticsData: [],\n      departementName: '',\n      departementId: '',\n      selectedYear: ''\n    };\n  },\n  computed: {\n    chartDataGeneral() {\n      if (this.statisticsData.length === 0) {\n        return null;\n      }\n      const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n      const data = Array(12).fill(0); // Initialize data array with zeros\n\n      this.statisticsData.forEach(item => {\n        const monthIndex = item.month;\n        if (monthIndex >= 1 && monthIndex <= 12) {\n          data[monthIndex - 1] += item.courrierCount;\n        }\n      });\n      return {\n        labels: labels,\n        datasets: [{\n          label: 'Statistique courrier de cette année',\n          backgroundColor: '#42A5F5',\n          data: data\n        }]\n      };\n    },\n    chartOptions() {\n      const dataValues = this.chartDataGeneral ? this.chartDataGeneral.datasets[0].data : [];\n      const minDataValue = Math.min(...dataValues, 0);\n      const maxDataValue = Math.max(...dataValues, 0);\n      const range = maxDataValue - minDataValue;\n      let stepSize;\n      if (range <= 10) {\n        stepSize = 1;\n      } else if (range <= 100) {\n        stepSize = 10;\n      } else {\n        stepSize = Math.ceil(range / 10);\n      }\n      return {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: true\n          },\n          title: {\n            display: true,\n            text: 'Document Statistics'\n          }\n        },\n        scales: {\n          y: {\n            min: Math.max(0, minDataValue - stepSize),\n            max: Math.ceil(maxDataValue / stepSize) * stepSize,\n            ticks: {\n              stepSize: stepSize\n            }\n          }\n        }\n      };\n    }\n  },\n  mounted() {\n    this.getDepartement();\n  },\n  methods: {\n    async getDepartement() {\n      try {\n        const userresponse = await axios.get('http://localhost:8081/api/utilisateur', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        const recu_par = userresponse.data;\n        if (!recu_par) {\n          console.error(\"User  data is missing\");\n          return;\n        }\n        const responsedept = await axios.get(`http://localhost:8081/api/departement/utilisateur/${recu_par.id_utilisateur}`);\n        this.departementId = responsedept.data;\n        const deptresponse = await axios.get(`http://localhost:8081/api/departement/${this.departementId}`);\n        this.departementName = deptresponse.data;\n        await this.fetchStatistics();\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async fetchStatistics() {\n      if (this.selectedYear === '') {\n        const response = await axios.get(`http://localhost:8081/api/statistique-general/courriers/${this.departementId}`);\n        this.statisticsData = response.data;\n        console.log(\"General Statistics Data:\", this.statisticsData);\n      } else {\n        const response = await axios.get(`http://localhost:8081/api/statistique/courriers/${this.departementId}/${this.selectedYear}`);\n        this.statisticsData = response.data;\n        console.log(\"Monthly Statistics Data:\", this.statisticsData);\n      }\n    }\n  }\n};","map":{"version":3,"names":["Bar","Chart","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","axios","register","components","BarChart","data","statisticsData","departementName","departementId","selectedYear","computed","chartDataGeneral","length","labels","Array","fill","forEach","item","monthIndex","month","courrierCount","datasets","label","backgroundColor","chartOptions","dataValues","minDataValue","Math","min","maxDataValue","max","range","stepSize","ceil","responsive","maintainAspectRatio","plugins","legend","display","title","text","scales","y","ticks","mounted","getDepartement","methods","userresponse","get","headers","Authorization","localStorage","getItem","recu_par","console","error","responsedept","id_utilisateur","deptresponse","fetchStatistics","response","log"],"sources":["src/pages/StatistiqueCourrierDept.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <div class=\"card\">\n          <div class=\"card-body\" style=\"height: 400px; display: flex; flex-direction: column;\">\n            <h3 style=\"color:#003366;\">{{ departementName }}</h3>\n            <h6>Statistiques du nombre de courriers de votre départment</h6>\n            <form @submit.prevent=\"fetchStatistics\" class=\"form-inline\">\n\n              <div class=\"form-group mx-sm-3 mb-2\">\n                <label for=\"year\" class=\"mr-2\">Année:</label>\n                <input type=\"number\" v-model=\"selectedYear\" id=\"year\" class=\"form-control\" placeholder=\"Year\" />\n              </div>\n              <button type=\"submit\" class=\"btn btn-primary mb-2\">Filtrer</button>\n            </form>\n            <div style=\"flex-grow: 1; display: flex; align-items: center; justify-content: center;\">\n              <bar-chart v-if=\"chartDataGeneral\" :data=\"chartDataGeneral\" :options=\"chartOptions\"></bar-chart>\n              <p v-else>Aucune donnée à afficher.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Bar } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js';\nimport axios from 'axios';\n\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\n\nexport default {\n  components: {\n    BarChart: Bar\n  },\n  data() {\n    return {\n      statisticsData: [],\n      departementName: '',\n      departementId: '',\n      selectedYear: '',\n    };\n  },\n  computed: {\n    chartDataGeneral() {\n      if (this.statisticsData.length === 0) {\n        return null;\n      }\n\n      const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n      const data = Array(12).fill(0); // Initialize data array with zeros\n\n      this.statisticsData.forEach(item => {\n        const monthIndex = item.month; \n        if (monthIndex >= 1 && monthIndex <= 12) {\n          data[monthIndex - 1] += item.courrierCount;\n        }\n      });\n\n      return {\n        labels: labels,\n        datasets: [\n          {\n            label: 'Statistique courrier de cette année',\n            backgroundColor: '#42A5F5',\n            data: data\n          }\n        ]\n      };\n    },\n    chartOptions() {\n      const dataValues = this.chartDataGeneral ? this.chartDataGeneral.datasets[0].data : [];\n      const minDataValue = Math.min(...dataValues, 0); \n      const maxDataValue = Math.max(...dataValues, 0);\n      const range = maxDataValue - minDataValue;\n\n      let stepSize;\n      if (range <= 10) {\n        stepSize = 1; \n      } else if (range <= 100) {\n        stepSize = 10; \n      } else {\n        stepSize = Math.ceil(range / 10);\n      }\n\n      return {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: true\n          },\n          title: {\n            display: true,\n            text: 'Document Statistics'\n          }\n        },\n        scales: {\n          y: {\n            min: Math.max(0, minDataValue - stepSize),\n            max: Math.ceil(maxDataValue / stepSize) * stepSize,\n            ticks: {\n              stepSize: stepSize\n            }\n          }\n        }\n      };\n    }\n  },\n  mounted() {\n    this.getDepartement();\n  },\n  methods: {\n    async getDepartement() {\n      try {\n        const userresponse = await axios.get('http://localhost:8081/api/utilisateur', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\n          },\n        });\n        const recu_par = userresponse.data; \n        if (!recu_par) {\n          console.error(\"User  data is missing\");\n          return;\n        }\n        const responsedept = await axios.get(`http://localhost:8081/api/departement/utilisateur/${recu_par.id_utilisateur}`);\n        this.departementId = responsedept.data;\n\n        const deptresponse = await axios.get(`http://localhost:8081/api/departement/${this.departementId}`);\n        this.departementName = deptresponse.data;\n\n        await this.fetchStatistics(); \n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async fetchStatistics() {\n      if (this.selectedYear === '') {\n        const response = await axios.get(`http://localhost:8081/api/statistique-general/courriers/${this.departementId}`);\n        this.statisticsData = response.data;\n        console.log(\"General Statistics Data:\", this.statisticsData);\n      } else {\n        const response = await axios.get(`http://localhost:8081/api/statistique/courriers/${this.departementId}/${this.selectedYear}`);\n        this.statisticsData = response.data;\n        console.log(\"Monthly Statistics Data:\", this.statisticsData);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.form-inline {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.form-group {\n  margin-right: 15px;\n}\n\n.btn {\n  margin-left: 10px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}