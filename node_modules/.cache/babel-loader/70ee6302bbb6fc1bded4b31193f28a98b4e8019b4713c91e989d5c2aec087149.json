{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'connection_user',\n  data() {\n    return {\n      nom_utilisateur: '',\n      mot_de_passe: '',\n      confirmMdp: '',\n      role: '',\n      email: '',\n      departement: '',\n      isLogin: true,\n      departements: [],\n      roles: [],\n      erreurMessage: ''\n    };\n  },\n  async mounted() {\n    await this.getDepartements();\n    await this.getRoles();\n    console.log(\"Départements chargés:\", this.departements);\n    console.log(\"Rôles chargés:\", this.roles);\n  },\n  methods: {\n    async getDepartements() {\n      try {\n        const response = await axios.get(\"http://localhost:8081/api/departements\");\n        this.departements = response.data;\n        console.log(this.departements);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async getRoles() {\n      try {\n        const response = await axios.get(\"http://localhost:8081/api/roles\");\n        this.roles = response.data;\n        console.log(\"Roles:\", this.roles);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    login() {\n      const formData = new FormData();\n      formData.append('nom_utilisateur', this.nom_utilisateur);\n      formData.append('mot_de_passe', this.mot_de_passe);\n      formData.append('email', this.email);\n      axios.post('http://localhost:8081/api/login', formData).then(response => {\n        console.log(response.data);\n        const token = response.data.token;\n        localStorage.setItem('authToken', token);\n        const redirectUrl = response.data.redirect;\n        this.$router.push(redirectUrl);\n      }).catch(error => {\n        console.error(error);\n        if (error.response) {\n          this.erreurMessage = error.response.data; // Affichez le message d'erreur\n        } else {\n          this.erreurMessage = 'Une erreur est survenue lors de la connexion.'; // Message générique\n        }\n      });\n    },\n    async signUp() {\n      if (this.mot_de_passe === this.confirmMdp) {\n        const receptionData = {\n          nom_utilisateur: this.nom_utilisateur,\n          mot_de_passe: this.confirmMdp,\n          email: this.email,\n          departement: this.departement || null,\n          role: this.role\n        };\n        console.log(\"Sending Reception Data:\", receptionData);\n        try {\n          const response = await axios.post('http://localhost:8081/api/signup', receptionData);\n          console.log(response.data);\n          this.isLogin = true;\n          this.nom_utilisateur = '';\n          this.mot_de_passe = '';\n          this.confirmMdp = '';\n          this.email = '';\n          this.role = '';\n          this.departement = '';\n        } catch (error) {\n          console.error(\"Erreur lors de l'inscription:\", error);\n          if (error.response) {\n            this.erreurMessage = error.response.data;\n          } else {\n            this.erreurMessage = 'Une erreur est survenue lors de la connexion.';\n          }\n        }\n      } else {\n        this.erreurMessage = 'password does not match';\n      }\n    },\n    toggleMode() {\n      this.isLogin = !this.isLogin;\n    },\n    isValidEmail(email) {\n      // Utilisation d'une expression régulière pour valider l'email\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      return emailPattern.test(email);\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","nom_utilisateur","mot_de_passe","confirmMdp","role","email","departement","isLogin","departements","roles","erreurMessage","mounted","getDepartements","getRoles","console","log","methods","response","get","error","login","formData","FormData","append","post","then","token","localStorage","setItem","redirectUrl","redirect","$router","push","catch","signUp","receptionData","toggleMode","isValidEmail","emailPattern","test"],"sources":["src/pages/LoginUser.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <div class=\"login-page\">\n      <div class=\"left\" ref=\"left\">\n        <h2>{{ isLogin ? 'Sign In' : 'Sign Up' }}</h2>\n        <div v-if=\"erreurMessage\" class=\"error\">{{ erreurMessage }}</div>\n        <form @submit.prevent=\"isLogin ? login() : signUp()\">\n          <div class=\"input-field\">\n            <label for=\"nom\">USERNAME</label>\n            <input type=\"text\" id=\"nom\" v-model=\"nom_utilisateur\" placeholder=\"Username\" />\n          </div>\n          <div class=\"input-field\">\n            <label for=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" v-model=\"email\" placeholder=\"Enter your mail\" />\n            <div v-if=\"!isValidEmail(email) && email\" class=\"error\">e-mail invalide</div>\n          </div>\n          <div class=\"input-field\">\n            <label for=\"mdp\">PASSWORD</label>\n            <input type=\"password\" id=\"mdp\" v-model=\"mot_de_passe\" placeholder=\"Password\" />\n          </div>\n          <div v-if=\"!isLogin\" class=\"input-field\">\n            <label for=\"confirm-mdp\">Confirm Password</label>\n            <input type=\"password\" id=\"confirm-mdp\" v-model=\"confirmMdp\" placeholder=\"Re-enter your password\" />\n          </div>\n          <div v-if=\"!isLogin\" class=\"input-field\">\n            <label for=\"role\">Role</label>\n            <select v-model=\"role\" id=\"role\" class=\"styled-select\">\n              <option value=\"\" disabled>Select your role</option>\n              <option v-for=\"role in roles\" :key=\"role.id\" :value=\"role\">\n                {{ role.nom_role }}\n              </option>\n            </select>\n          </div>\n          <div v-if=\"!isLogin && role.nom_role !== 'Secretaire'\" class=\"input-field\">\n            <label for=\"departement\">Department</label>\n            <select v-model=\"departement\" id=\"departement\" class=\"styled-select\">\n              <option value=\"\" disabled>Select your department</option>\n              <option v-for=\"departement in departements\" :key=\"departement.id\" :value=\"departement\">\n                {{ departement.nom_departement }}\n              </option>\n            </select>\n          </div>\n          <div class=\"remember-me\" v-if=\"isLogin\">\n            <router-link :to=\"{ name: 'forget_password'}\" class=\"forgot-password\">Forgot Password?</router-link>\n          </div>\n          <button type=\"submit\" class=\"sign-in-btn\">{{ isLogin ? 'Sign In' : 'Sign Up' }}</button>\n        </form>\n      </div>\n      <div class=\"right\">\n        <h2 style=\"color: #FF5733\">Document Tracking</h2>\n        <p>Welcome to {{ isLogin ? 'Sign In' : 'Sign Up' }}</p>\n        <button class=\"sign-up-btn\" @click=\"toggleMode\">{{ isLogin ? 'Sign Up' : 'Sign In' }}</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'connection_user',\n  data() {\n    return {\n      nom_utilisateur: '',\n      mot_de_passe: '',\n      confirmMdp: '',\n      role: '',\n      email: '',\n      departement: '',\n      isLogin: true,\n      departements: [],\n      roles: [],\n      erreurMessage: '',\n    }\n  },\n  \n  async mounted() {\n    await this.getDepartements();\n    await this.getRoles();\n    console.log(\"Départements chargés:\", this.departements);\n    console.log(\"Rôles chargés:\", this.roles);\n  },\n  methods: {\n    async getDepartements() {\n      try {\n        const response = await axios.get(\"http://localhost:8081/api/departements\");\n        this.departements = response.data;\n        console.log(this.departements);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async getRoles() {\n      try {\n        const response = await axios.get(\"http://localhost:8081/api/roles\");\n        this.roles = response.data;\n        console.log(\"Roles:\", this.roles);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    login() {\n      const formData = new FormData();\n      formData.append('nom_utilisateur', this.nom_utilisateur);\n      formData.append('mot_de_passe', this.mot_de_passe);\n      formData.append('email', this.email);\n\n      axios.post('http://localhost:8081/api/login', formData)\n        .then(response => {\n          console.log(response.data);\n          const token = response.data.token;\n          localStorage.setItem('authToken', token);\n          const redirectUrl = response.data.redirect;\n          this.$router.push(redirectUrl);\n        })\n        .catch(error => {\n          console.error(error);\n          if (error.response) {\n            this.erreurMessage = error.response.data; // Affichez le message d'erreur\n          } else {\n            this.erreurMessage = 'Une erreur est survenue lors de la connexion.'; // Message générique\n          }\n        });\n    },\n    async signUp() {\n      if (this.mot_de_passe === this.confirmMdp) {\n        const receptionData = {\n          nom_utilisateur: this.nom_utilisateur,\n          mot_de_passe: this.confirmMdp,\n          email: this.email,\n          departement: this.departement || null,\n          role: this.role\n        };\n\n        console.log(\"Sending Reception Data:\", receptionData);\n\n        try {\n          const response = await axios.post('http://localhost:8081/api/signup', receptionData);\n          console.log(response.data);  \n          \n          this.isLogin = true;\n          this.nom_utilisateur = '';\n          this.mot_de_passe = '';\n          this.confirmMdp = '';\n          this.email = '';\n          this.role = '';\n          this.departement = '';\n        } catch (error) {\n          console.error(\"Erreur lors de l'inscription:\", error);\n          if (error.response) {\n            this.erreurMessage = error.response.data; \n          } else {\n            this.erreurMessage = 'Une erreur est survenue lors de la connexion.';\n          }\n        }\n      } else {\n        this.erreurMessage = 'password does not match';\n      }\n    },\n    toggleMode() {\n      this.isLogin = !this.isLogin;\n    },\n    isValidEmail(email) {\n      // Utilisation d'une expression régulière pour valider l'email\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      return emailPattern.test(email);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.login-container {\n  display: flex;\n  justify-content: center; \n  align-items: center; \n  height: 100vh; \n  background-color: #011214;\n}\n\n.login-page {\n  display: flex;\n  width: 800px;\n  height: 500px;\n  background-color: #0A2A2F;\n  overflow-y: auto;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.left, .right {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n\n.left {\n  border-right: 1px solid #FFFFFF;\n  padding: 40px;\n  box-sizing: border-box;\n}\n\n.right {\n  padding: 40px;\n  box-sizing: border-box;\n  color: #FFFFFF;\n}\n\n.left h2, .right h2 {\n  font-size: 24px;\n  margin-bottom: 5px;\n  display: block;\n}\n\n.left .input-field {\n  width: 100%;\n  margin-bottom: 2px;\n  display: block;\n}\n\n.left .input-field label {\n  display: block;\n  margin-bottom: 5px;\n  color: #FFFFFF;\n}\n\n.left .input-field input, .left .input-field select {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #CCCCCC;\n  border-radius: 5px;\n  background-color: #FFFFFF;\n}\n\n.left .sign-in-btn {\n  width: 100%;\n  padding: 10px;\n  background-color: #F36F21;\n  border: none;\n  border-radius: 5px;\n  color: #FFFFFF;\n  font-size: 16px;\n  cursor: pointer;\n  margin-top: 20px;\n}\n\n.right .sign-up-btn {\n  padding: 10px 20px;\n  background-color: transparent;\n  border: 2px solid #FFFFFF;\n  border-radius: 5px;\n  color: #FFFFFF;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n.left .forgot-password {\n  color: #FFFFFF;\n  text-align: right;\n  display: block;\n  margin-top: 10px;\n  text-decoration: none;\n}\n\n.error {\n  color: red;\n  margin-bottom: 10px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}